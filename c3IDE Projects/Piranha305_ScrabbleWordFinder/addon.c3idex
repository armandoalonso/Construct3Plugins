@@START ADDON.JSON
{
  "is-c3-addon": true,
  "type": "plugin",
  "name": "Scrabble Word Finder",
  "id": "Piranha305_ScrabbleWordFinder",
  "version": "1.0.0.1",
  "author": "Piranha305",
  "website": "https://www.construct.net",
  "documentation": "https://www.construct.net",
  "description": "A helper to generate list of valid words from letters",
  "editor-scripts": [
    "plugin.js",
    "type.js",
    "instance.js"
  ],
  "file-list": [
    "c3runtime/plugin.js",
    "c3runtime/type.js",
    "c3runtime/instance.js",
    "c3runtime/conditions.js",
    "c3runtime/actions.js",
    "c3runtime/expressions.js",
    "lang/en-US.json",
    "aces.json",
    "addon.json",
    "icon.svg",
    "instance.js",
    "plugin.js",
    "type.js",
    "c3runtime/ScrabbleWordList.js",
    "c3runtime/ScrabbleWordFinder.js",
    "c3runtime/seedrandom.js"
  ]
}
@@END ADDON.JSON

@@START PLUGIN_EDIT.JS
"use strict";
{

    const PLUGIN_ID = "Piranha305_ScrabbleWordFinder";
    const PLUGIN_VERSION = "1.0.0.1";
    const PLUGIN_CATEGORY = "other";

    const PLUGIN_CLASS = SDK.Plugins.Piranha305_ScrabbleWordFinder = class ScrabbleWordFinderPlugin extends SDK.IPluginBase
    {
        constructor()
        {
            super(PLUGIN_ID);

            SDK.Lang.PushContext("plugins." + PLUGIN_ID.toLowerCase());

            this._info.SetName(lang(".name"));
            this._info.SetDescription(lang(".description"));
            this._info.SetVersion(PLUGIN_VERSION);
            this._info.SetCategory(PLUGIN_CATEGORY);
            this._info.SetAuthor("Piranha305");
            this._info.SetHelpUrl(lang(".help-url"));
            this._info.SetIsSingleGlobal(true);

            this._info.SetSupportedRuntimes(["c3"]);

            SDK.Lang.PushContext(".properties");

            this._info.SetProperties([

            ]);

            this._info.AddFileDependency(
            {
                filename: "c3runtime/seedrandom.js",
                type: "inline-script"
            });
            
            this._info.AddFileDependency(
            {
                filename: "c3runtime/ScrabbleWordList.js",
                type: "inline-script"
            });
            
            this._info.AddFileDependency(
            {
                filename: "c3runtime/ScrabbleWordFinder.js",
                type: "inline-script"
            });
            
            SDK.Lang.PopContext(); //.properties
            SDK.Lang.PopContext();
        }
    };

    PLUGIN_CLASS.Register(PLUGIN_ID, PLUGIN_CLASS);
}
@@END PLUGIN_EDIT.JS

@@START PLUGIN_RUN.JS
"use strict";
{
	C3.Plugins.Piranha305_ScrabbleWordFinder = class ScrabbleWordFinderPlugin extends C3.SDKPluginBase
	{
		constructor(opts)
		{
			super(opts);
		}
		
		Release()
		{
			super.Release();
		}
	};
}
@@END PLUGIN_RUN.JS

@@START TYPE_EDIT.JS
"use strict";
{
	const PLUGIN_CLASS = SDK.Plugins.Piranha305_ScrabbleWordFinder;
	
	PLUGIN_CLASS.Type = class ScrabbleWordFinderType extends SDK.ITypeBase
	{
		constructor(sdkPlugin, iObjectType)
		{
			super(sdkPlugin, iObjectType);
		}
	};
}
@@END TYPE_EDIT.JS

@@START TYPE_RUN.JS
"use strict";
{
	C3.Plugins.Piranha305_ScrabbleWordFinder.Type = class ScrabbleWordFinderType extends C3.SDKTypeBase
	{
		constructor(objectClass)
		{
			super(objectClass);
		}
		
		Release()
		{
			super.Release();
		}
		
		OnCreate()
		{	
		}
	};
}
@@END TYPE_RUN.JS

@@START INSTANCE_EDIT.JS
"use strict";
{
	const PLUGIN_CLASS = SDK.Plugins.Piranha305_ScrabbleWordFinder;
	
	PLUGIN_CLASS.Instance = class ScrabbleWordFinderInstance extends SDK.IInstanceBase
	{
		constructor(sdkType, inst)
		{
			super(sdkType, inst);
		}
		
		Release()
		{
		}
		
		OnCreate()
		{
		}
		
		OnPropertyChanged(id, value)
		{
		}
		
		LoadC2Property(name, valueString)
		{
			return false;		// not handled
		}
	};
}
@@END INSTANCE_EDIT.JS

@@START INSTANCE_RUN.JS
"use strict";
{
	C3.Plugins.Piranha305_ScrabbleWordFinder.Instance = class ScrabbleWordFinderInstance extends C3.SDKInstanceBase
	{
		constructor(inst, properties)
		{
			super(inst);
			this.wordList = {};
			this.usedWords = {};
			
			this.wordCount = 0;
			
			if (properties)
			{
			}
		}
		
		Release()
		{
			super.Release();
		}
		
		SaveToJson()
		{
			return {
				// data to be saved for savegames
			};
		}
		
		LoadFromJson(o)
		{
			// load state for savegames
		}
	};
}
@@END INSTANCE_RUN.JS

@@START LANG_PROP.JSON
"properties": {}
@@END LANG_PROP.JSON

@@START LANG_CAT.JSON
"aceCategories": {
    "word" : "Word"
}
@@END LANG_CAT.JSON


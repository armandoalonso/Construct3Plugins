@@START ADDON.JSON
{
  "is-c3-addon": true,
  "type": "plugin",
  "name": "CSS Extention",
  "id": "Piranha305_CssExtention",
  "version": "1.0.0.0",
  "author": "Piranha305",
  "website": "https://www.construct.net",
  "documentation": "https://www.construct.net",
  "description": "Helps in applying css styles to html elements",
  "editor-scripts": [
    "plugin.js",
    "type.js",
    "instance.js"
  ],
  "file-list": [
    "c3runtime/plugin.js",
    "c3runtime/type.js",
    "c3runtime/instance.js",
    "c3runtime/conditions.js",
    "c3runtime/actions.js",
    "c3runtime/expressions.js",
    "lang/en-US.json",
    "aces.json",
    "addon.json",
    "icon.svg",
    "instance.js",
    "plugin.js",
    "type.js"
  ]
}
@@END ADDON.JSON

@@START PLUGIN_EDIT.JS
"use strict";
{

	const PLUGIN_ID = "Piranha305_CssExtention";	
	const PLUGIN_VERSION = "1.0.0.0";
	const PLUGIN_CATEGORY = "form-controls";
	
	const PLUGIN_CLASS = SDK.Plugins.Piranha305_CssExtention = class CssExtentionPlugin extends SDK.IPluginBase
	{
		constructor()
		{
			super(PLUGIN_ID);
			
			SDK.Lang.PushContext("plugins." + PLUGIN_ID.toLowerCase());
			
			this._info.SetName(lang(".name"));
			this._info.SetDescription(lang(".description"));
			this._info.SetVersion(PLUGIN_VERSION);
			this._info.SetCategory(PLUGIN_CATEGORY);
			this._info.SetAuthor("Piranha305");
			this._info.SetHelpUrl(lang(".help-url"));
			this._info.SetIsSingleGlobal(true);

			this._info.SetSupportedRuntimes(["c3"]);
			
			SDK.Lang.PushContext(".properties");
	
			this._info.SetProperties([
				new SDK.PluginProperty("group", "CSS"),
				new SDK.PluginProperty("longtext", "CSSFiles", ""),
				new SDK.PluginProperty("longtext", "CSSExternal", ""),
				new SDK.PluginProperty("group", "JS"),
				new SDK.PluginProperty("longtext", "JSFiles", ""),
				new SDK.PluginProperty("longtext", "JSExternal", ""),
			]);
			
            SDK.Lang.PopContext(); //.properties
			SDK.Lang.PopContext();
		}
	};
	
	PLUGIN_CLASS.Register(PLUGIN_ID, PLUGIN_CLASS);
}
@@END PLUGIN_EDIT.JS

@@START PLUGIN_RUN.JS
"use strict";
{
	C3.Plugins.Piranha305_CssExtention = class CssExtentionPlugin extends C3.SDKPluginBase
	{
		constructor(opts)
		{
			super(opts);
		}
		
		Release()
		{
			super.Release();
		}
	};
}
@@END PLUGIN_RUN.JS

@@START TYPE_EDIT.JS
"use strict";
{
	const PLUGIN_CLASS = SDK.Plugins.Piranha305_CssExtention;
	
	PLUGIN_CLASS.Type = class CssExtentionType extends SDK.ITypeBase
	{
		constructor(sdkPlugin, iObjectType)
		{
			super(sdkPlugin, iObjectType);
		}
	};
}
@@END TYPE_EDIT.JS

@@START TYPE_RUN.JS
"use strict";
{
	C3.Plugins.Piranha305_CssExtention.Type = class CssExtentionType extends C3.SDKTypeBase
	{
		constructor(objectClass)
		{
			super(objectClass);
		}
		
		Release()
		{
			super.Release();
		}
		
		OnCreate()
		{	
		}
	};
}
@@END TYPE_RUN.JS

@@START INSTANCE_EDIT.JS
"use strict";
{
	const PLUGIN_CLASS = SDK.Plugins.Piranha305_CssExtention;
	
	PLUGIN_CLASS.Instance = class CssExtentionInstance extends SDK.IInstanceBase
	{
		constructor(sdkType, inst)
		{
			super(sdkType, inst);
		}
		
		Release()
		{
		}
		
		OnCreate()
		{
		}
		
		OnPropertyChanged(id, value)
		{
		}
		
		LoadC2Property(name, valueString)
		{
			return false;		// not handled
		}
	};
}
@@END INSTANCE_EDIT.JS

@@START INSTANCE_RUN.JS
"use strict";
{
	C3.Plugins.Piranha305_CssExtention.Instance = class CssExtentionInstance extends C3.SDKInstanceBase
	{
		constructor(inst, properties)
		{
			super(inst);
			
			this.CSSFiles = '';
      		this.CSSExternal = '';
      		this.JSFiles = '';
      		this.JSExternal = '';
			
			if (properties)
			{
				this.CSSFiles = properties[0];
        		this.CSSExternal = properties[1];
        		this.JSFiles = properties[2];
        		this.JSExternal = properties[3];
			}
			
			//process css & js files
			if (this.CSSExternal != '') {
		        this.ProcessFiles(this.CSSExternal, "CSS");
		    }
		
		    if (this.CSSFiles != '') {
		        this.ProcessFiles(this.CSSFiles, "CSS");
		    }
		
		    if (this.JSExternal != '') {
		        this.ProcessFiles(this.JSExternal, "JS");
		    }
		
		    if (this.JSFiles != '') {
		        this.ProcessFiles(this.JSFiles, "JS");
		    }   
		}
		
		Release()
		{
			super.Release();
		}
		
		SaveToJson()
		{
			return {
				// data to be saved for savegames
			};
		}
		
		LoadFromJson(o)
		{
			// load state for savegames
		}
		
		ProcessFiles(fileName, type = "CSS")
		{
			let files = [];
			files = fileName.split('\n');
			
			for(let i=0; i < files.length; i++){
				let temp = files[i];
				if(!temp.replace(/\s/g, '').length) continue;
				this.InjectElementInHead(temp, type);
			}
		}
		
		async InjectElementInHead(name, type = "CSS")
		{
			let url = await this._runtime.GetAssetManager().LoadProjectFileUrl(name);
			
			if(type == 'CSS'){
				this.InjectCSSIntoHead(url);
			}
			else if(type == 'JS'){
				this.InjectJSIntoHead(url);
			}
		}
		
		InjectCSSIntoHead(url)
		{
			let ele = document.createElement("link");
			ele.setAttribute("rel", "stylesheet");
          	ele.setAttribute("type", "text/css");
          	ele.setAttribute("href", url);
          	document.head.appendChild(ele);
		}
		
		InjectJSIntoHead(url)
		{
			let ele = document.createElement("link");
			ele.setAttribute("src", url);
			document.head.appendChild(ele);
		}
	};
}
@@END INSTANCE_RUN.JS

@@START LANG_PROP.JSON
"properties": {
    "CSS": {
      "name": "CSS",
      "desc": "CSS"
    },
    "CSSFiles": {
      "name": "CSS Files",
      "desc": "A list of css file names included in the project"
    },
    "CSSExternal": {
      "name": "CSS External",
      "desc": "A list of css urls to link to the project"
    },
    "JS": {
      "name": "JS",
      "desc": "JS"
    },
    "JSFiles": {
      "name": "JS Files",
      "desc": "A list of js file names included in the project"
    },
    "JSExternal": {
      "name": "JS External",
      "desc": "A list of js urls to link to the project"
    }
  }
@@END LANG_PROP.JSON

@@START LANG_CAT.JSON
"aceCategories": {
    "html" : "HTML"
}
@@END LANG_CAT.JSON


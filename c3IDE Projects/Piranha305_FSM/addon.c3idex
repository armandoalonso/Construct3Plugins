@@START ADDON.JSON
{
  "is-c3-addon": true,
  "type": "behavior",
  "name": "FSM",
  "id": "Piranha305_FSM",
  "version": "1.0.0.0",
  "author": "Piranha305",
  "website": "https://www.construct.net",
  "documentation": "https://www.construct.net",
  "description": "Finite State Machine Behavior (fsm)",
  "editor-scripts": [
    "behavior.js",
    "type.js",
    "instance.js"
  ],
  "file-list": [
    "c3runtime/behavior.js",
    "c3runtime/type.js",
    "c3runtime/instance.js",
    "c3runtime/conditions.js",
    "c3runtime/actions.js",
    "c3runtime/expressions.js",
    "lang/en-US.json",
    "aces.json",
    "addon.json",
    "icon.svg",
    "instance.js",
    "behavior.js",
    "type.js"
  ]
}
@@END ADDON.JSON

@@START PLUGIN_EDIT.JS
"use strict"; {

    const BEHAVIOR_ID = "Piranha305_FSM";
    const BEHAVIOR_VERSION = "1.0.0.0";
    const BEHAVIOR_CATEGORY = "general";

    const BEHAVIOR_CLASS = SDK.Behaviors.Piranha305_FSM = class FSMBehavior extends SDK.IBehaviorBase 
    {
        constructor() 
        {
            super(BEHAVIOR_ID);

            SDK.Lang.PushContext("behaviors." + BEHAVIOR_ID.toLowerCase());

            this._info.SetName(lang(".name"));
            this._info.SetDescription(lang(".description"));
            this._info.SetVersion(BEHAVIOR_VERSION);
            this._info.SetCategory(BEHAVIOR_CATEGORY);
            this._info.SetAuthor("Piranha305");
            this._info.SetHelpUrl(lang(".help-url"));
            this._info.SetIsOnlyOneAllowed(false);

            this._info.SetSupportedRuntimes(["c3"]);

            SDK.Lang.PushContext(".properties");

            this._info.SetProperties([
                new SDK.PluginProperty("check", "active", true),
                new SDK.PluginProperty("text", "startState", "Off"),
            ]);

            SDK.Lang.PopContext(); //.properties
            SDK.Lang.PopContext();
        }
    };

    BEHAVIOR_CLASS.Register(BEHAVIOR_ID, BEHAVIOR_CLASS);
}
@@END PLUGIN_EDIT.JS

@@START PLUGIN_RUN.JS
"use strict";
{
	C3.Behaviors.c3IDE_FSM = class FSMBehavior extends C3.SDKBehaviorBase
	{
		constructor(opts)
		{
			super(opts);
		}
		
		Release()
		{
			super.Release();
		}
	};
}
@@END PLUGIN_RUN.JS

@@START TYPE_EDIT.JS
"use strict"; {
    const BEHAVIOR_CLASS = SDK.Behaviors.Piranha305_FSM;

    BEHAVIOR_CLASS.Type = class FSMType extends SDK.IBehaviorTypeBase 
    {
        constructor(sdkPlugin, iBehaviorType) 
        {
            super(sdkPlugin, iBehaviorType);
        }
    };
}
@@END TYPE_EDIT.JS

@@START TYPE_RUN.JS
"use strict"; {
    C3.Behaviors.Piranha305_FSM.Type = class FSMType extends C3.SDKBehaviorTypeBase 
    {
        constructor(objectClass)
        {
            super(objectClass);
        }

        Release() 
        {
            super.Release();
        }

        OnCreate() 
        {
        }
    };
}
@@END TYPE_RUN.JS

@@START INSTANCE_EDIT.JS
"use strict"; {
    const BEHAVIOR_CLASS = SDK.Behaviors.Piranha305_FSM;

    BEHAVIOR_CLASS.Instance = class FSMInstance extends SDK.IBehaviorInstanceBase 
    {
        constructor(sdkBehType, behInst) 
        {
            super(sdkBehType, behInst);
        }

        Release() 
        {
        }

        OnCreate() 
        {
        }

        OnPropertyChanged(id, value) 
        {
        }

        LoadC2Property(name, valueString) 
        {
            return false; // not handled
        }
    };
}
@@END INSTANCE_EDIT.JS

@@START INSTANCE_RUN.JS
"use strict"; {
    C3.Behaviors.Piranha305_FSM.Instance = class FSMInstance extends C3.SDKBehaviorInstanceBase 
    {
        constructor(behInst, properties) 
        {
            super(behInst);

            this.active = true;
            this.startState = "Off";

            if (properties) 
            {
                this.active = properties[0];
                this.startState = properties[1];

                this.startState = (this.startState != "" || this.startState != null) ? this.startState : "Off";
            }

            this.currentState = this.startState;
            this.previousState = this.startState;

            //
            //this.Trigger(C3.Behaviors.c3IDE_FSM.Cnds.OnEnter);

            // Opt-in to getting calls to Tick()
            //this._StartTicking();
        }

        Release() 
        {
            super.Release();
        }

        SaveToJson() 
        {
            return 
            {
                active: this.active,
                prev: this.previousState,
                curr: this.currentState
            };
        }

        LoadFromJson(o) 
        {
            this.active = o["active"];
            this.previousState = o["prev"];
            this.currentState = o["curr"];
        }

        /*
		Tick()
		{
			const dt = this._runtime.GetDt(this._inst);
			const wi = this._inst.GetWorldInfo();
			
			// ... code to run every tick for this behavior ...
		}
		*/
    };
}
@@END INSTANCE_RUN.JS

@@START LANG_PROP.JSON
"properties":{
    "active" : {
        "name": "Active",
        "desc": "Enable / Disbale the FSM"
    },
    "startState" : {
        "name": "Start State",
        "desc": "The starting state of the FSM"
    }
}
@@END LANG_PROP.JSON

@@START LANG_CAT.JSON
"aceCategories": {
    "fsm" : "FSM"
}
@@END LANG_CAT.JSON


@@START broadcast|publish
@@ACE
{
  "id": "broadcast",
  "scriptName": "Broadcast",
  "highlight": false,
  "params": [
    {
      "id": "channel",
      "type": "string"
    },
    {
      "id": "msg",
      "type": "string"
    }
  ]
}
@@LANG
"broadcast":{
  "list-name": "Broadcast",
  "display-text": "Sends a message [b]{1}[/b] to channel [b]{0}[/b]",
  "description": "Sends a message to all instance listening on that channel",
  "params": {
    "channel": {
      "name": "Channel",
      "desc": "The channel to send the message"
    },
    "msg": {
      "name": "Msg",
      "desc": "The message to send"
    }
  }
}
@@CODE
Broadcast(channel, msg)
{
    var bInstances = this._inst.GetBehaviorInstances();
    console.log(bInstances);
    for (let behavior of bInstances)
    {
        //console.log(behavior);
        var behaviorType = behavior.GetBehaviorType();
        if (behaviorType.GetName() == "PubSub")
        {
            //console.log(behaviorType.GetBehavior());
            //console.log(behaviorType.GetBehavior().GetInstances());
            //console.log(behavior);
            var sdkInstance = behavior.GetSdkInstance();
            //console.log(sdkInstance);
            sdkInstance.CallAction(C3.Behaviors.Piranha305_PubSub.Acts.SimulateMessage, channel, msg);
        }
        //SDKBehaviorInstance
    }
    //var instances = behInst.GetBehavior().GetInstances();	
    //console.log(instances);
}
@@END broadcast

@@START simulate-message|message
@@ACE
{
  "id": "simulate-message",
  "scriptName": "SimulateMessage",
  "highlight": false,
  "params": [
    {
      "id": "channel",
      "type": "string"
    },
    {
      "id": "msg",
      "type": "string"
    }
  ]
}
@@LANG
"simulate-message":{
  "list-name": "Simulate Message",
  "display-text": "Simulate message [b]{1}[/b] to channel [b]{0}[/b]",
  "description": "This sets the data for the message recieved",
  "params": {
    "channel": {
      "name": "Channel",
      "desc": "The channel"
    },
    "msg": {
      "name": "Message",
      "desc": "The message"
    }
  }
}
@@CODE
SimulateMessage(channel, msg)
{
    this.SimulateMessgae(channel, msg);
}
@@END simulate-message


@@START set-activated|enable
@@ACE
{
  "id": "set-activated",
  "scriptName": "SetEnabled",
  "highlight": false,
  "params": [
    {
      "id": "state2",
      "type": "combo",
      "items": [
        "disabled",
        "enabled"
      ]
    }
  ],
  "c2id": 0
}
@@LANG
"set-activated":{
  "list-name": "Set activated",
  "display-text": "Set {my} [b]{0}[/b]",
  "description": "Set whether this behavior is activated. It will also pause current moving.",
  "params": {
    "state2": {
      "name": "State",
      "desc": "Set whether to enable or disable the behavior.",
      "items": {
        "disabled": "Disabled",
        "enabled": "Enabled"
      }
    }
  }
}
@@CODE
SetEnabled(en)
{
    this.enabled = (en === 1);
}
@@END set-activated

@@START set-stop-by-solid|enable
@@ACE
{
  "id": "set-stop-by-solid",
  "scriptName": "SetStopBySolid",
  "highlight": false,
  "params": [
    {
      "id": "state2",
      "type": "combo",
      "items": [
        "disabled",
        "enabled"
      ]
    }
  ],
  "c2id": 11
}
@@LANG
"set-stop-by-solid":{
  "list-name": "Stop by solid",
  "display-text": "Set {my} stop by solid [b]{0}[/b]",
  "description": "Enabled or disable stop by solid.",
  "params": {
    "state2": {
      "name": "State",
      "desc": "Set whether to enable or disable the behavior.",
      "items": {
        "disabled": "Disabled",
        "enabled": "Enabled"
      }
    }
  }
}
@@CODE
SetStopBySolid(en)
{
    this.soildStopEnable = (en === 1);
}
@@END set-stop-by-solid

@@START set-max-speed|speed
@@ACE
{
  "id": "set-max-speed",
  "scriptName": "SetMaxSpeed",
  "highlight": false,
  "params": [
    {
      "id": "max_speed0",
      "type": "number"
    }
  ],
  "c2id": 1
}
@@LANG
"set-max-speed":{
  "list-name": "Set maximum speed",
  "display-text": "Set {my} maximum speed to [b]{0}[/b]",
  "description": "Set the object's maximum speed.",
  "params": {
    "max_speed0": {
      "name": "Max speed",
      "desc": "Maximum speed, in pixel per second."
    }
  }
}
@@CODE
SetMaxSpeed(s)
{
    this.moveParams["max"] = s;
    this.setCurrentSpeed(null);
}
@@END set-max-speed

@@START set-acceleration|speed
@@ACE
{
  "id": "set-acceleration",
  "scriptName": "SetAcceleration",
  "highlight": false,
  "params": [
    {
      "id": "acceleration0",
      "type": "number"
    }
  ],
  "c2id": 2
}
@@LANG
"set-acceleration":{
  "list-name": "Set acceleration",
  "display-text": "Set {my} acceleration to [b]{0}[/b]",
  "description": "Set the object's acceleration.",
  "params": {
    "acceleration0": {
      "name": "Acceleration",
      "desc": "The acceleration setting, in pixel per second per second."
    }
  }
}
@@CODE
SetAcceleration(a)
{
    this.moveParams["acc"] = a;
    this.setCurrentSpeed(null);
}
@@END set-acceleration

@@START set-deceleration|speed
@@ACE
{
  "id": "set-deceleration",
  "scriptName": "SetDeceleration",
  "highlight": false,
  "params": [
    {
      "id": "deceleration0",
      "type": "number"
    }
  ],
  "c2id": 3
}
@@LANG
"set-deceleration":{
  "list-name": "Set deceleration",
  "display-text": "Set {my} deceleration to [b]{0}[/b]",
  "description": "Set the object's deceleration.",
  "params": {
    "deceleration0": {
      "name": "Deceleration",
      "desc": "The deceleration setting, in pixels per second per second."
    }
  }
}
@@CODE
SetDeceleration(a)
{
    this.moveParams["dec"] = a;
}
@@END set-deceleration

@@START set-current-speed|speed
@@ACE
{
  "id": "set-current-speed",
  "scriptName": "SetCurrentSpeed",
  "highlight": false,
  "params": [
    {
      "id": "current_speed0",
      "type": "number"
    }
  ],
  "c2id": 5
}
@@LANG
"set-current-speed":{
  "list-name": "Set current speed",
  "display-text": "Set {my} current speed to [b]{0}[/b]",
  "description": "Set the object's Current speed.",
  "params": {
    "current_speed0": {
      "name": "Current speed",
      "desc": "Current speed, in pixel per second."
    }
  }
}
@@CODE
SetCurrentSpeed(s)
{
    this.setCurrentSpeed(s);
}
@@END set-current-speed

@@START set-target-position|move-to
@@ACE
{
  "id": "set-target-position",
  "scriptName": "SetTargetPos",
  "highlight": true,
  "params": [
    {
      "id": "x0",
      "type": "number"
    },
    {
      "id": "y1",
      "type": "number"
    }
  ],
  "c2id": 4
}
@@LANG
"set-target-position":{
  "list-name": "Move to position",
  "display-text": "{my} move to ([b]{0}[/b], [b]{1}[/b])",
  "description": "Move to specific position.",
  "params": {
    "x0": {
      "name": "X",
      "desc": "The X co-ordinate to move toward."
    },
    "y1": {
      "name": "Y",
      "desc": "The Y co-ordinate to move toward."
    }
  }
}
@@CODE
SetTargetPos(x, y)
{
    this.setTargetPos(x, y)
}
@@END set-target-position

@@START set-target-position-to-object|move-to
@@ACE
{
  "id": "set-target-position-to-object",
  "scriptName": "SetTargetPosOnObject",
  "highlight": false,
  "params": [
    {
      "id": "target0",
      "type": "object"
    }
  ],
  "c2id": 6
}
@@LANG
"set-target-position-to-object":{
  "list-name": "Move to object",
  "display-text": "{my} move to [b]{0}[/b]",
  "description": "Move to object.",
  "params": {
    "target0": {
      "name": "Target",
      "desc": "Target object."
    }
  }
}
@@CODE
SetTargetPosOnObject(objtype)
{
    if (!objtype)
    {
        return;
    }
    var inst = objtype.GetFirstPicked();
    if (inst != null)
    {
        this.setTargetPos(inst.GetWorldInfo().GetX(), inst.GetWorldInfo().GetY());
    }
}
@@END set-target-position-to-object

@@START set-target-position-to-delta-xy|move-to
@@ACE
{
  "id": "set-target-position-to-delta-xy",
  "scriptName": "SetTargetPosByDeltaXY",
  "highlight": false,
  "params": [
    {
      "id": "dx0",
      "type": "number"
    },
    {
      "id": "dy1",
      "type": "number"
    }
  ],
  "c2id": 7
}
@@LANG
"set-target-position-to-delta-xy":{
  "list-name": "Move to delta XY",
  "display-text": "{my} move to (delta [b]{0}[/b], delta [b]{1}[/b])",
  "description": "Move to specific position by deltaXY.",
  "params": {
    "dx0": {
      "name": "dX",
      "desc": "The delta X to move toward, in pixel."
    },
    "dy1": {
      "name": "dY",
      "desc": "The delta Y to move toward, in pixel."
    }
  }
}
@@CODE
SetTargetPosByDeltaXY(dx, dy)
{
    this.setTargetPos(this.wi.GetX() + dx, this.wi.GetY() + dy);
}
@@END set-target-position-to-delta-xy

@@START set-target-position-to-distance-angle|move-to
@@ACE
{
  "id": "set-target-position-to-distance-angle",
  "scriptName": "SetTargetPosByDistanceAngle",
  "highlight": false,
  "params": [
    {
      "id": "distance0",
      "type": "number"
    },
    {
      "id": "angle1",
      "type": "number"
    }
  ],
  "c2id": 8
}
@@LANG
"set-target-position-to-distance-angle":{
  "list-name": "Move to distance-angle",
  "display-text": "{my} move to (distance [b]{0}[/b], angle [b]{1}[/b])",
  "description": "Move to specific position by distance-angle.",
  "params": {
    "distance0": {
      "name": "Distance",
      "desc": "The destance to move toward, in pixel."
    },
    "angle1": {
      "name": "Angle",
      "desc": "The angle of moving destance to move toward, in degree."
    }
  }
}
@@CODE
SetTargetPosByDistanceAngle(distance, angle)
{
    var a = to_clamped_radians(angle);
    var dx = distance * Math.cos(a);
    var dy = distance * Math.sin(a);
    this.setTargetPos(this.wi.GetX() + dx, this.wi.GetY() + dy);
}
@@END set-target-position-to-distance-angle

@@START set-target-position-to-uid|move-to
@@ACE
{
  "id": "set-target-position-to-uid",
  "scriptName": "SetTargetPosOnUID",
  "highlight": false,
  "params": [
    {
      "id": "uid0",
      "type": "number"
    }
  ],
  "c2id": 10
}
@@LANG
"set-target-position-to-uid":{
  "list-name": "Move to UID",
  "display-text": "{my} move to UID: [b]{0}[/b]",
  "description": "Move to object by UID.",
  "params": {
    "uid0": {
      "name": "UID",
      "desc": "UID of target object."
    }
  }
}
@@CODE
SetTargetPosOnUID(uid)
{
    var inst = this._runtime.GetInstanceByUID(uid);
    if (inst != null) this.setTargetPos(inst.GetWorldInfo().GetX(), inst.GetWorldInfo().GetY());
}
@@END set-target-position-to-uid

@@START stop|stop
@@ACE
{
  "id": "stop",
  "scriptName": "Stop",
  "highlight": false,
  "c2id": 9
}
@@LANG
"stop":{
  "list-name": "Stop",
  "display-text": "{my} stop",
  "description": "Stop moving."
}
@@CODE
Stop()
{
    this.isMoving = false;
}
@@END stop

